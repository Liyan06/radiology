# -*- coding: utf-8 -*-
"""inference_numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/0B4Q3s2OjWdTeY2ZJY3RxWUJHTHFpdFRQdWFaYjdVQnZWSk1r
"""

import numpy as np
import pandas as pd
import itertools
import datetime
import os

from radiology.params import HYBRID_BN_DISEASES
from radiology.params import HYBRID_BN_TABLE

# Configuration
#input_file = './Template_Trial_Diagnosis_with_empty_model_columns.csv'
#output_file = './diagnosis_results_numpy.csv'
# '/Users/abhijeetpradhan/Documents/PythonNotebooks/model1_hybrid/hybrid_model.csv'
model_file = HYBRID_BN_TABLE
disease_names_file = HYBRID_BN_DISEASES#'/Users/abhijeetpradhan/Documents/PythonNotebooks/model1_hybrid/diseases.csv'
most_likely_states_file = 'most_likely_states.csv'

# mapping from state names in hybrid model to human-readable names
state_names = {
    'flair': {1: 'increased', 2: 'normal', 3: 'decreased'},
    't2': {1: 'increased', 2: 'normal', 3: 'decreased'},
    't1': {1: 'increased', 2: 'normal', 3: 'decreased'},
    't1_post': {1: 'yes', 2: 'no'},
    'adc': {1: 'increased', 2: 'normal', 3: 'decreased'},
    't2_susc': {1: 'yes', 2: 'no'},
    'homogeneous': {1: 'yes', 2: 'no', 100: 'na'},
    'number': {1: 'single', 2: 'multiple', 100: 'na'},
    'side': {1: 'unilateral', 2: 'bilateral', 100: 'na'},
    'mass': {1: 'positive', 2: 'normal', 3: 'negative'},
    'age': {1: 'young', 2: 'adult', 3: 'old'},
    'size': {1: 'small', 2: 'medium', 3: 'large', 100: 'na'},
    'location': {1: 'cg', 2: 'cw', 3: 'dgw', 4: 'bs', 5: 'ce', 6: 'iv', 7: 'ec', 100: 'na'},
}

# mapping from hybrid model disease names to human-readable names
disease_names = pd.read_csv(disease_names_file)
disease_names = {row['disease_id']: row['ergo_name']
                 for i, row in disease_names.iterrows()}


class BaseModel:
    children = [
        'adc', 'age', 'flair', 't1_post', 'mass', 'number', 'size',
        'side', 't2_susc', 't1', 't2', 'homogeneous', 'location']

    def __init__(self, model_path=None):
        if model_path is not None:
            self.model_path = model_path
        self.initialize()

    def initialize(self):
        a1 = datetime.datetime.now()

        model_def = pd.read_csv(self.model_path)

        # Prior probabilities for presence and absence of any disease
        disease_prior = np.array([0.006967, 0.993033])
        # Prior probabilities for normal
        normal_prior = [0.15, 0.85]

        self.networks = []
        self.diseases = []

        for i in range(0, len(model_def)):  # len(model_def)
            disrow = model_def.iloc[i]

            disease = disrow['disease']
            prior = np.array(normal_prior if disease == 200 else disease_prior)
            fulllabels = np.array([s for s in disrow.keys()[1:]])
            child = np.array([s.split('/')[0] for s in disrow.keys()[1:]])
            childunique = np.unique(child)
            state = np.array([int(s.split('/')[1]) for s in disrow.keys()[1:]])
            negpos = np.array([s.split('/')[2] for s in disrow.keys()[1:]])
            probs = disrow[1:].values.astype(np.float32)
            probs[probs == 0] = 0.005
            probs[probs == 1.0] = 0.995

            tables = dict()
            states = dict()

            for ch in np.unique(child):
                subsetlabels = fulllabels[(negpos == 'yp') & (child == ch)]
                states[ch] = state[(negpos == 'yp') & (child == ch)]
                tables[ch] = np.zeros((len(states[ch]), 2))
                tables[ch][:, 0] = probs[(negpos == 'yp') & (child == ch)]
                tables[ch][:, 1] = probs[(negpos == 'np') & (child == ch)]

            self.networks.append({'states': states, 'tables': tables})
            self.diseases.append(disease)

        self.diseases = np.array(self.diseases).astype(np.int)
        self.children = childunique
        self.disease_prior = disease_prior
        self.normal_prior = normal_prior

        a2 = datetime.datetime.now()
        c = a2-a1
        print('time to load models = ', c.total_seconds())

    def diagnose_case(self, case):
        probs = np.zeros(len(self.diseases))
        for i, net in enumerate(self.networks):
            p_disease = self.normal_prior if self.diseases[i] == 200 else self.disease_prior
            for ch in case:
                p_feature_given_disease = self.networks[i]['tables'][ch][np.where(
                    case[ch] == self.networks[i]['states'][ch])[0][0]]

                # P(D|F) = P(F|D) * P(D) / (P(D)*P(F|D) + P(-D)*P(F|-D))
                p_disease = p_feature_given_disease * p_disease / \
                    np.sum(p_feature_given_disease*p_disease)

            probs[i] = p_disease[0]

        probs /= probs.sum()

        return self.diseases, probs

    def diagnose_cases(self, input_file, output_file):
        # Load the input cases
        cases_table = pd.read_csv(input_file)

        # add columns for the percentages
        for k in range(3):
            cases_table['model_ddx%i_pcent' % (
                k+1)] = pd.Series(np.zeros(len(cases_table)), index=cases_table.index)

        scounter = 0
        for i, row in cases_table.iterrows():
            print("i  = ", i)
            a3 = datetime.datetime.now()

            case = {ch: row[ch] for ch in self.children}
            diseases, disease_probs = self.diagnose_case(case)

            # Find the top 3 diseases
            top3_diseases = diseases[np.argsort(disease_probs)[::-1]][:3]
            top3_probs = np.sort(disease_probs)[::-1][:3]

            for k in range(3):
                row['model_ddx%i' % (k+1)] = '%s' % top3_diseases[k]
                row['model_ddx%i_pcent' %
                    (k+1)] = '%0.2f%%' % (top3_probs[k]*100)

            cases_table.iloc[i] = row
            a4 = datetime.datetime.now()
            c2 = a4 - a3
            print('Diagnosing case %i/%i...' %
                  (i+1, len(cases_table)), "took ", c2.total_seconds())

        # Save the output
        cases_table.to_csv(output_file)

        return cases_table


model = BaseModel(model_path=model_file)
#model.diagnose_cases(input_file, output_file)

most_likely_states = pd.DataFrame(columns=['disease'] + list(model.children))

for disease, network in zip(model.diseases, model.networks):
    d = {'disease': disease_names[disease]}
    for feature in model.children:
        states = network['states'][feature]
        probs = network['tables'][feature][:, 0]

        states = states[np.argsort(probs)[::-1]]
        probs = np.sort(probs)[::-1]

        if probs[0] > 0.6:
            n_states = 1
        elif probs[0] > 0.4:
            n_states = 2
        else:
            n_states = len(states)

        d[feature] = ', '.join(['%s (%0.1f%%)' % (
            state_names[feature][states[i]], 100*probs[i]) for i in range(n_states)])

    most_likely_states = most_likely_states.append(d, ignore_index=True)

most_likely_states.to_csv(most_likely_states_file)
